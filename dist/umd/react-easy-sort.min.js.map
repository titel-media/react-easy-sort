{"version":3,"file":"react-easy-sort.min.js","sources":["../../src/helpers.ts","../../src/hooks.ts","../../src/index.tsx"],"sourcesContent":["import { Point } from './types'\n\n/**\n * This function check if a given point is inside of the items rect.\n * If it's not inside any rect, it will return the index of the closest rect\n */\nexport const findItemIndexAtPosition = (\n  { x, y }: Point,\n  itemsRect: DOMRect[],\n  { fallbackToClosest = false } = {}\n): number => {\n  let smallestDistance = 10000\n  let smallestDistanceIndex = -1\n  for (let index = 0; index < itemsRect.length; index += 1) {\n    const rect = itemsRect[index]\n    // if it's inside the rect, we return the current index directly\n    if (x >= rect.left && x < rect.right && y >= rect.top && y < rect.bottom) {\n      return index\n    }\n    if (fallbackToClosest) {\n      // otherwise we compute the distance and update the smallest distance index if needed\n      const itemCenterX = (rect.left + rect.right) / 2\n      const itemCenterY = (rect.top + rect.bottom) / 2\n\n      const distance = Math.sqrt(Math.pow(x - itemCenterX, 2) + Math.pow(y - itemCenterY, 2)) // ** 2 operator is not supported on IE11\n      if (distance < smallestDistance) {\n        smallestDistance = distance\n        smallestDistanceIndex = index\n      }\n    }\n  }\n  return smallestDistanceIndex\n}\n","import React from 'react'\n\nimport { Point } from './types'\n\nconst getMousePoint = (e: MouseEvent | React.MouseEvent): Point => ({\n  x: Number(e.clientX),\n  y: Number(e.clientY),\n})\n\nconst getTouchPoint = (touch: Touch | React.Touch): Point => ({\n  x: Number(touch.clientX),\n  y: Number(touch.clientY),\n})\n\nconst getPointInContainer = (point: Point, containerTopLeft: Point): Point => {\n  return {\n    x: point.x - containerTopLeft.x,\n    y: point.y - containerTopLeft.y,\n  }\n}\n\nconst preventDefault = (event: Event) => {\n  event.preventDefault()\n}\n\nconst disableContextMenu = () => {\n  window.addEventListener('contextmenu', preventDefault, { capture: true, passive: false })\n}\n\nconst enableContextMenu = () => {\n  window.removeEventListener('contextmenu', preventDefault)\n}\n\nexport type OnStartArgs = { point: Point; pointInWindow: Point }\nexport type OnMoveArgs = { point: Point; pointInWindow: Point }\n\ntype UseDragProps = {\n  onStart?: (args: OnStartArgs) => void\n  onMove?: (args: OnMoveArgs) => void\n  onEnd?: () => void\n  containerRef: React.MutableRefObject<HTMLDivElement | null>\n}\n\nexport const useDrag = ({ onStart, onMove, onEnd, containerRef }: UseDragProps) => {\n  // contains the top-left coordinates of the container in the window. Set on drag start and used in drag move\n  const containerPositionRef = React.useRef<Point>({ x: 0, y: 0 })\n  // on touch devices, we only start the drag gesture after pressing the item 200ms.\n  // this ref contains the timer id to be able to cancel it\n  const handleTouchStartTimerRef = React.useRef<number | undefined>(undefined)\n  // on non-touch device, we don't call onStart on mouse down but on the first mouse move\n  // we do this to let the user clicks on clickable element inside the container\n  // this means that the drag gesture actually starts on the fist move\n  const isFirstMoveRef = React.useRef(false)\n  // see https://twitter.com/ValentinHervieu/status/1324407814970920968\n  // we do this so that the parent doesn't have to use `useCallback()` for these callbacks\n  const callbacksRef = React.useRef({ onStart, onMove, onEnd })\n\n  // instead of relying on hacks to know if the device is a touch device or not,\n  // we track this using an onTouchStart listener on the document. (see https://codeburst.io/the-only-way-to-detect-touch-with-javascript-7791a3346685)\n  const [isTouchDevice, setTouchDevice] = React.useState(false)\n\n  React.useEffect(() => {\n    callbacksRef.current = { onStart, onMove, onEnd }\n  }, [onStart, onMove, onEnd])\n\n  const cancelTouchStart = () => {\n    if (handleTouchStartTimerRef.current) {\n      window.clearTimeout(handleTouchStartTimerRef.current)\n    }\n  }\n\n  const saveContainerPosition = React.useCallback(() => {\n    if (containerRef.current) {\n      const bounds = containerRef.current.getBoundingClientRect()\n      containerPositionRef.current = { x: bounds.left, y: bounds.top }\n    }\n  }, [containerRef])\n\n  const onDrag = React.useCallback((pointInWindow: Point) => {\n    const point = getPointInContainer(pointInWindow, containerPositionRef.current)\n    if (callbacksRef.current.onMove) {\n      callbacksRef.current.onMove({ pointInWindow, point })\n    }\n  }, [])\n\n  const onMouseMove = React.useCallback(\n    (e: MouseEvent) => {\n      // if this is the first move, we trigger the onStart logic\n      if (isFirstMoveRef.current) {\n        isFirstMoveRef.current = false\n        const pointInWindow = getMousePoint(e)\n        const point = getPointInContainer(pointInWindow, containerPositionRef.current)\n        if (callbacksRef.current.onStart) {\n          callbacksRef.current.onStart({ point, pointInWindow })\n        }\n      }\n      // otherwise, we do the normal move logic\n      else {\n        onDrag(getMousePoint(e))\n      }\n    },\n    [onDrag]\n  )\n\n  const onTouchMove = React.useCallback(\n    (e: TouchEvent) => {\n      if (e.cancelable) {\n        // Prevent the whole page from scrolling\n        e.preventDefault()\n        onDrag(getTouchPoint(e.touches[0]))\n      } else {\n        // if the event is not cancelable, it means the browser is currently scrolling\n        // which cannot be interrupted. Thus we cancel the drag gesture.\n        document.removeEventListener('touchmove', onTouchMove)\n        if (callbacksRef.current.onEnd) {\n          callbacksRef.current.onEnd()\n        }\n      }\n    },\n    [onDrag]\n  )\n\n  const onMouseUp = React.useCallback(() => {\n    isFirstMoveRef.current = false\n    document.removeEventListener('mousemove', onMouseMove)\n    document.removeEventListener('mouseup', onMouseUp)\n    if (callbacksRef.current.onEnd) {\n      callbacksRef.current.onEnd()\n    }\n  }, [onMouseMove])\n\n  const onTouchEnd = React.useCallback(() => {\n    document.removeEventListener('touchmove', onTouchMove)\n    document.removeEventListener('touchend', onTouchEnd)\n    enableContextMenu()\n    if (callbacksRef.current.onEnd) {\n      callbacksRef.current.onEnd()\n    }\n  }, [onTouchMove])\n\n  const onMouseDown = React.useCallback(\n    (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (e.button !== 0) {\n        // we don't want to handle clicks other than left ones\n        return\n      }\n      document.addEventListener('mousemove', onMouseMove)\n      document.addEventListener('mouseup', onMouseUp)\n\n      saveContainerPosition()\n\n      // mark the next move as being the first one\n      isFirstMoveRef.current = true\n    },\n    [onMouseMove, onMouseUp, saveContainerPosition]\n  )\n\n  const handleTouchStart = React.useCallback(\n    (point: Point, pointInWindow: Point) => {\n      document.addEventListener('touchmove', onTouchMove, { capture: false, passive: false })\n      document.addEventListener('touchend', onTouchEnd)\n      disableContextMenu()\n\n      if (callbacksRef.current.onStart) {\n        callbacksRef.current.onStart({ point, pointInWindow })\n      }\n    },\n    [onTouchEnd, onTouchMove]\n  )\n\n  const onTouchStart = React.useCallback(\n    (e: TouchEvent) => {\n      saveContainerPosition()\n\n      const pointInWindow = getTouchPoint(e.touches[0])\n      const point = getPointInContainer(pointInWindow, containerPositionRef.current)\n\n      // we wait 120ms to start the gesture to be sure that the user\n      // is not trying to scroll the page\n      handleTouchStartTimerRef.current = window.setTimeout(\n        () => handleTouchStart(point, pointInWindow),\n        120\n      )\n    },\n    [handleTouchStart, saveContainerPosition]\n  )\n\n  const detectTouchDevice = React.useCallback(() => {\n    setTouchDevice(true)\n    document.removeEventListener('touchstart', detectTouchDevice)\n  }, [])\n\n  // if the user is scrolling on mobile, we cancel the drag gesture\n  const touchScrollListener = React.useCallback(() => {\n    cancelTouchStart()\n  }, [])\n\n  React.useLayoutEffect(() => {\n    if (isTouchDevice) {\n      const container = containerRef.current\n      container?.addEventListener('touchstart', onTouchStart, { capture: true, passive: false })\n      // we are adding this touchmove listener to cancel drag if user is scrolling\n      // however, it's also important to have a touchmove listener always set\n      // with non-capture and non-passive option to prevent an issue on Safari\n      // with e.preventDefault (https://github.com/atlassian/react-beautiful-dnd/issues/1374)\n      document.addEventListener('touchmove', touchScrollListener, {\n        capture: false,\n        passive: false,\n      })\n      document.addEventListener('touchend', touchScrollListener, {\n        capture: false,\n        passive: false,\n      })\n\n      return () => {\n        container?.removeEventListener('touchstart', onTouchStart)\n        document.removeEventListener('touchmove', touchScrollListener)\n        document.removeEventListener('touchend', touchScrollListener)\n        document.removeEventListener('touchmove', onTouchMove)\n        document.removeEventListener('touchend', onTouchEnd)\n        enableContextMenu()\n        cancelTouchStart()\n      }\n    }\n    // if non-touch device\n    document.addEventListener('touchstart', detectTouchDevice)\n    return () => {\n      document.removeEventListener('touchstart', detectTouchDevice)\n      document.removeEventListener('mousemove', onMouseMove)\n      document.removeEventListener('mouseup', onMouseUp)\n    }\n  }, [\n    isTouchDevice,\n    detectTouchDevice,\n    onMouseMove,\n    onTouchMove,\n    touchScrollListener,\n    onTouchEnd,\n    onMouseUp,\n    containerRef,\n    onTouchStart,\n  ])\n\n  // on touch devices, we cannot attach the onTouchStart directly via React:\n  // Touch handlers must be added with {passive: false} to be cancelable.\n  // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n  return isTouchDevice ? {} : { onMouseDown }\n}\n","import arrayMove from 'array-move'\nimport React, { HTMLAttributes } from 'react'\n\nimport { findItemIndexAtPosition } from './helpers'\nimport { useDrag } from './hooks'\nimport { Point } from './types'\n\ntype Props = HTMLAttributes<HTMLDivElement> & {\n  children: React.ReactNode\n  /** Called when the user finishes a sorting gesture. */\n  onSortEnd: (oldIndex: number, newIndex: number) => void\n  /** Class applied to the item being dragged */\n  draggedItemClassName?: string\n}\n\n// this context is only used so that SortableItems can register/remove themselves\n// from the items list\ntype Context = {\n  registerItem: ({item, index}: {item: HTMLDivElement, index: number}) => void\n  removeItem: (item: HTMLDivElement) => void\n}\n\nconst SortableListContext = React.createContext<Context | undefined>(undefined)\n\nconst SortableList = ({ children, onSortEnd, draggedItemClassName, ...rest }: Props) => {\n  // this array contains the elements than can be sorted (wrapped inside SortableItem)\n  const itemsRef = React.useRef<HTMLElement[]>([])\n  // this array contains the coordinates of each sortable element (only computed on dragStart and used in dragMove for perf reason)\n  const itemsRect = React.useRef<DOMRect[]>([])\n  // contains the container element\n  const containerRef = React.useRef<HTMLDivElement | null>(null)\n  // contains the target element (copy of the source element)\n  const targetRef = React.useRef<HTMLElement | null>(null)\n  // contains the index in the itemsRef array of the element being dragged\n  const sourceIndexRef = React.useRef<number | undefined>(undefined)\n  // contains the index in the itemsRef of the element to be exchanged with the source item\n  const lastTargetIndexRef = React.useRef<number | undefined>(undefined)\n\n  React.useEffect(() => {\n    return () => {\n      // cleanup the target element from the DOM when SortableList in unmounted\n      if (targetRef.current) {\n        document.body.removeChild(targetRef.current)\n      }\n    }\n  }, [])\n\n  const updateTargetPosition = (position: Point) => {\n    if (targetRef.current) {\n      // we use `translate3d` to force using the GPU if available\n      targetRef.current.style.transform = `translate(-50%, -50%) translate3d(${position.x}px, ${position.y}px, 0px)`\n    }\n  }\n\n  const copyItem = React.useCallback(\n    (sourceIndex: number) => {\n      if (!containerRef.current) {\n        return\n      }\n\n      const source = itemsRef.current[sourceIndex]\n      const sourceRect = itemsRect.current[sourceIndex]\n\n      const copy = source.cloneNode(true) as HTMLElement\n\n      // added the \"dragged\" class name\n      if (draggedItemClassName) {\n        draggedItemClassName.split(' ').forEach((c) => copy.classList.add(c))\n      }\n\n      // we ensure the copy has the same size than the source element\n      copy.style.width = `${sourceRect.width}px`\n      copy.style.height = `${sourceRect.height}px`\n      // we place the target starting position at the top-left of the container\n      // it will then be moved relatively using `transform: translate3d()`\n      const containerBounds = containerRef.current.getBoundingClientRect()\n      copy.style.position = 'fixed'\n      copy.style.top = `${containerBounds.top}px`\n      copy.style.left = `${containerBounds.left}px`\n\n      document.body.appendChild(copy)\n\n      targetRef.current = copy\n    },\n    [draggedItemClassName]\n  )\n\n  const listeners = useDrag({\n    containerRef,\n    onStart: ({ point, pointInWindow }) => {\n      if (!containerRef.current) {\n        return\n      }\n\n      itemsRect.current = itemsRef.current.map((item) => item.getBoundingClientRect())\n\n      const sourceIndex = findItemIndexAtPosition(pointInWindow, itemsRect.current)\n      // if we are not starting the drag gesture on a SortableItem, we exit early\n      if (sourceIndex === -1) {\n        return\n      }\n\n      // saving the index of the item being dragged\n      sourceIndexRef.current = sourceIndex\n\n      // the item being dragged is copied to the document body and will be used as the target\n      copyItem(sourceIndex)\n      updateTargetPosition(point)\n\n      // hide source during the drag gesture\n      const source = itemsRef.current[sourceIndex]\n      source.style.opacity = '0'\n      source.style.visibility = 'hidden'\n\n      // Adds a nice little physical feedback\n      if (window.navigator.vibrate) {\n        window.navigator.vibrate(100)\n      }\n    },\n    onMove: ({ point, pointInWindow }) => {\n      updateTargetPosition(point)\n\n      const sourceIndex = sourceIndexRef.current\n      // if there is no source, we exit early (happened when drag gesture was started outside a SortableItem)\n      if (sourceIndex === undefined) {\n        return\n      }\n\n      const targetIndex = findItemIndexAtPosition(pointInWindow, itemsRect.current, {\n        fallbackToClosest: true,\n      })\n      // if not target detected, we don't need to update other items' position\n      if (targetIndex === -1) {\n        return\n      }\n      // we keep track of the last target index (to be passed to the onSortEnd callback)\n      lastTargetIndexRef.current = targetIndex\n\n      const isMovingRight = sourceIndex < targetIndex\n\n      // in this loop, we go over each sortable item and see if we need to update their position\n      for (let index = 0; index < itemsRef.current.length; index += 1) {\n        const currentItem = itemsRef.current[index]\n        const currentItemRect = itemsRect.current[index]\n        // if current index is between sourceIndex and targetIndex, we need to translate them\n        if (\n          (isMovingRight && index >= sourceIndex && index <= targetIndex) ||\n          (!isMovingRight && index >= targetIndex && index <= sourceIndex)\n        ) {\n          // we need to move the item to the previous or next item position\n          const nextItemRects = itemsRect.current[isMovingRight ? index - 1 : index + 1]\n          if (nextItemRects) {\n            const translateX = nextItemRects.left - currentItemRect.left\n            const translateY = nextItemRects.top - currentItemRect.top\n            // we use `translate3d` to force using the GPU if available\n            currentItem.style.transform = `translate3d(${translateX}px, ${translateY}px, 0px)`\n          }\n        }\n        // otherwise, the item should be at its original position\n        else {\n          currentItem.style.transform = 'translate3d(0,0,0)'\n        }\n        // we want the translation to be animated\n        currentItem.style.transitionDuration = '300ms'\n      }\n    },\n    onEnd: () => {\n      // we reset all items translations (the parent is expected to sort the items in the onSortEnd callback)\n      for (let index = 0; index < itemsRef.current.length; index += 1) {\n        const currentItem = itemsRef.current[index]\n        currentItem.style.transform = ''\n        currentItem.style.transitionDuration = ''\n      }\n\n      const sourceIndex = sourceIndexRef.current\n      if (sourceIndex !== undefined) {\n        // show the source item again\n        const source = itemsRef.current[sourceIndex]\n        if (source) {\n          source.style.opacity = '1'\n          source.style.visibility = ''\n        }\n\n        const targetIndex = lastTargetIndexRef.current\n        if (targetIndex !== undefined) {\n          if (sourceIndex !== targetIndex) {\n            // sort our internal items array\n            itemsRef.current = arrayMove(itemsRef.current, sourceIndex, targetIndex)\n            // let the parent know\n            onSortEnd(sourceIndex, targetIndex)\n          }\n        }\n      }\n      sourceIndexRef.current = undefined\n      lastTargetIndexRef.current = undefined\n\n      // cleanup the target element from the DOM\n      if (targetRef.current) {\n        document.body.removeChild(targetRef.current)\n        targetRef.current = null\n      }\n    },\n  })\n\n  const registerItem = React.useCallback(({ item, index }: { item: HTMLDivElement, index: number }) => {\n    const existingIndex = itemsRef.current.indexOf(item)\n\n    if (existingIndex === -1) {\n      itemsRef.current.push(item)\n    } \n    \n    if (existingIndex !== index) {\n      arrayMove(itemsRef.current, existingIndex, index)\n    }\n  }, [])\n\n  const removeItem = React.useCallback((item: HTMLDivElement) => {\n    const index = itemsRef.current.indexOf(item)\n    if (index !== -1) {\n      itemsRef.current.splice(index, 1)\n    }\n  }, [])\n\n  // we need to memoize the context to avoid re-rendering every children of the context provider\n  // when not needed\n  const context = React.useMemo(() => ({ registerItem, removeItem }), [registerItem, removeItem])\n\n  return (\n    <div {...listeners} {...rest} ref={containerRef}>\n      <SortableListContext.Provider value={context}>{children}</SortableListContext.Provider>\n    </div>\n  )\n}\n\nexport default SortableList\n\ntype ItemProps = {\n  children: React.ReactElement,\n  index: number\n}\n\n/**\n * SortableItem only adds a ref to its children so that we can register it to the main Sortable\n */\nexport const SortableItem = ({ children, index }: ItemProps) => {\n  const context = React.useContext(SortableListContext)\n  if (!context) {\n    throw new Error('SortableItem must be a child of SortableList')\n  }\n  const { registerItem, removeItem } = context\n  const elementRef = React.useRef<HTMLDivElement | null>(null)\n\n  React.useEffect(() => {\n    const currentItem = elementRef.current\n    if (currentItem) {\n      registerItem({ item: currentItem, index })\n    }\n\n    return () => {\n      if (currentItem) {\n        removeItem(currentItem)\n      }\n    }\n  })\n\n  return React.cloneElement(children, { ref: elementRef })\n}\n"],"names":["findItemIndexAtPosition","_a","itemsRect","_b","x","y","_c","fallbackToClosest","smallestDistance","smallestDistanceIndex","index","length","rect","left","right","top","bottom","itemCenterX","itemCenterY","distance","Math","sqrt","pow","getMousePoint","e","Number","clientX","clientY","getTouchPoint","touch","getPointInContainer","point","containerTopLeft","preventDefault","event","enableContextMenu","window","removeEventListener","useDrag","onStart","onMove","onEnd","containerRef","containerPositionRef","React","useRef","handleTouchStartTimerRef","undefined","isFirstMoveRef","callbacksRef","useState","isTouchDevice","setTouchDevice","useEffect","current","cancelTouchStart","clearTimeout","saveContainerPosition","useCallback","bounds","getBoundingClientRect","onDrag","pointInWindow","onMouseMove","onTouchMove","cancelable","touches","document","onMouseUp","onTouchEnd","onMouseDown","button","addEventListener","handleTouchStart","capture","passive","onTouchStart","setTimeout","detectTouchDevice","touchScrollListener","useLayoutEffect","container_1","SortableListContext","createContext","children","context","useContext","Error","registerItem","removeItem","elementRef","currentItem","item","cloneElement","ref","onSortEnd","draggedItemClassName","rest","itemsRef","targetRef","sourceIndexRef","lastTargetIndexRef","body","removeChild","updateTargetPosition","position","style","transform","copyItem","sourceIndex","source","sourceRect","copy","cloneNode","split","forEach","c","classList","add","width","height","containerBounds","appendChild","listeners","map","opacity","visibility","navigator","vibrate","targetIndex","isMovingRight","currentItemRect","nextItemRects","translateX","translateY","transitionDuration","arrayMove","existingIndex","indexOf","push","splice","useMemo","Provider","value"],"mappings":"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"}